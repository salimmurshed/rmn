part of 'purchase_bloc.dart';

@freezed
class PurchaseWithInitialState with _$PurchaseWithInitialState {
  const factory PurchaseWithInitialState({
    required String message,
    required bool isLoading,
    required bool isFix,
    required bool willRegister,
    required bool isApplyActive,
    required bool isCouponLoading,
    required bool isProcessingPurchase,
    required bool isPriceReducedForRegs,
    required num totalReducedPrice,
    required num productSum,
    required num athleteSum,
    required bool isRefreshedRequired,
    required bool isFailure,
    required bool isEditActive,
    required bool isActivePurchaseButton,
    required String coverImage,
    required String assetUrl,
    required String eventTitle,
    required String? dateErrorForCard,
    required String eventLocation,
    required String eventDateTime,
    required List<String> matchedTeams,
    required List<CardData> cardList,
    required List<Athlete> readyForRegistrationAthletes,
    required List<Athlete> athleteWithSeasonPasses,
    required List<Products> products,
    required List<Products> selectedProducts,
    required List<Products> needsGiveaway,
    required List<SeasonPass> seasonPasses,
    required int styleIndex,
    required int currentCardIndex,
    required int selectedCardIndex,
    required String cardToken,
    required PaymentModuleTabNames paymentModuleTabs,
    required CouponModules couponModule,
    required PageController cardPageController,
    required bool isExpanded,
    required bool isEditRegs,
    required bool isContinueButtonActive,
    required bool isApplyButtonActive,
    required bool isDropDownOpened,
    required TextEditingController searchController,
    required TextEditingController otherTeamController,
    required bool isProductDropDownOpened,
    required String? selectedValue,
    required String? selectedValueProduct,
    required String registrationSubTotal,
    required String productSubTotal,
    required String seasonPassSubTotal,
    required String couponCode,
    required String couponAmount,
    required num couponAmountInNum,
    required TextEditingController couponEditingController,
    required FocusNode couponNode,
    required num totalWithTransactionWithoutCouponFee,
    required num totalWithTransactionWithCouponFee,
    required String transactionFee,
    required num totalWithCoupon,
    required String couponMessage,
    required String currentSeasonPassTitle,
    required bool isCardSaved,
    required num totalWithOutCoupon,
    required num? registrationLimit,
    required num totalRegistration,
    required List<String> tabNames,
    required List<SummaryCardTypeForRegistration> registrationForSummary,
    required List<Memberships> seasonPassForSummary,
    required bool isProductsSelected,
    required TextEditingController nameEditingController,
    required FocusNode nameFocusNode,
    required TextEditingController cardNumberEditingController,
    required FocusNode cardNumberFocusNode,
    required TextEditingController cvcEditingController,
    required FocusNode cvcFocusNode,
    required TextEditingController expiryDateEditingController,
    required FocusNode expiryDateFocusNode,
    required GlobalKey<FormState> formKey,
    required TypesOfGiveaway typeOfGivaway,
    required int tabIndex,
    required num totalSum,
    required num apiCouponAmount,
    required String? couponError,
  }) = _PurchaseWithInitialState;

  factory PurchaseWithInitialState.initial() => PurchaseWithInitialState(
      isFailure: false,
      isLoading: true,
      isCouponLoading: false,
      isProcessingPurchase: false,
      isFix: false,
      isApplyActive: false,
      productSum: 0,
      athleteSum: 0,
      isActivePurchaseButton: true,
      isPriceReducedForRegs: false,
      isEditRegs: true,
      needsGiveaway: [],
      totalSum: 0,
      couponError: null,
      apiCouponAmount: 0,
      totalReducedPrice: 0,
      tabIndex: 0,
      typeOfGivaway: TypesOfGiveaway.type4,
      isDropDownOpened: false,
      couponModule: CouponModules.none,
      dateErrorForCard: null,
      isProductDropDownOpened: false,
      isProductsSelected: false,
      isApplyButtonActive: false,
      isEditActive: true,
      isCardSaved: false,
      isContinueButtonActive: false,
      cardToken: AppStrings.global_empty_string,
      currentSeasonPassTitle: AppStrings.global_empty_string,
      styleIndex: 0,
      couponAmountInNum: 0,
      currentCardIndex: 0,
      selectedCardIndex: -1,
      athleteWithSeasonPasses: [],
      seasonPasses: [],
      couponEditingController: TextEditingController(),
      couponNode: FocusNode(),
      cardPageController: PageController(),
      paymentModuleTabs: PaymentModuleTabNames.none,
      isRefreshedRequired: false,
      isExpanded: false,
      couponMessage: AppStrings.global_empty_string,
      searchController: TextEditingController(),
      otherTeamController: TextEditingController(),
      selectedValue: null,
      selectedValueProduct: null,
      message: AppStrings.global_empty_string,
      coverImage: AppStrings.global_empty_string,
      eventTitle: AppStrings.global_empty_string,
      eventLocation: AppStrings.global_empty_string,
      eventDateTime: AppStrings.global_empty_string,
      assetUrl: AppStrings.global_empty_string,
      couponCode: AppStrings.global_empty_string,
      couponAmount: AppStrings.global_empty_string,
      productSubTotal: AppStrings.global_empty_zero,
      registrationSubTotal: AppStrings.global_empty_zero,
      totalWithTransactionWithCouponFee: 0,
      totalWithTransactionWithoutCouponFee: 0,
      seasonPassSubTotal: AppStrings.global_empty_zero,
      totalWithCoupon: 0,
      totalWithOutCoupon: 0,
      transactionFee: AppStrings.global_empty_zero,
      readyForRegistrationAthletes: [],
      products: [],
      tabNames: [],
      matchedTeams: [],
      registrationForSummary: [],
      selectedProducts: [],
      seasonPassForSummary: [],
      cardList: [],
      nameEditingController: TextEditingController(),
      nameFocusNode: FocusNode(),
      cardNumberEditingController: TextEditingController(),
      cardNumberFocusNode: FocusNode(),
      cvcEditingController: TextEditingController(),
      cvcFocusNode: FocusNode(),
      formKey: GlobalKey<FormState>(),
      expiryDateEditingController: TextEditingController(),
      expiryDateFocusNode: FocusNode(),
      registrationLimit: null,
      totalRegistration: 0,
      willRegister: false,
  );
}

class SummaryCardTypeForRegistration {
  String type;
  String ageGroup;
  String wcList;
  String title;
  String division;
  String style;
  num price;
  num quantity;
  num totalPrice;
  num nominator;
  num denominator;
  String tierName;
  num max;
  num? reducedPrice;
  SummaryCardTypeForRegistration({
    required this.type,
    required this.ageGroup,
    required this.wcList,
    required this.title,
    required this.division,
    required this.style,
    required this.price,
    required this.quantity,
    required this.totalPrice,
    required this.nominator,
    required this.denominator,
    required this.max,
    required this.tierName,
    required this.reducedPrice,
  });
}
